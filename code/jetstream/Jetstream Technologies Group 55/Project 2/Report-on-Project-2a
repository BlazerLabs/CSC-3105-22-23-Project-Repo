# Project 2
**The following is a report on the work done by JETSTREAM TECHNOLOGIES GROUP 55 on a project assigned during CSC 3105 coursework in the 2022/23 session, as follows:**

## Question
Data structures complement algorithms in the way programs work, on account of their facility for organising and enabling access to data; thus, understanding data structures is fundamental to our knowledge and use of programs, irrespective of what paradigm is in play.
a. Each group in your corporation is to identify and describe ALL data structures used in programming.

## Response

Below, is a list of data structures across different categories as worked on by all groups under JETSTREAM TECHNOLOGIES:
1. Linear Data Structures
2. Non-Linear Data Structures
3. Advanced Data Structures
4. Specialized Data Structures
5. String Data Structures


1. Linear Data Structures:
Linear Data Structures Overview:

Linear data structures organize and store data elements sequentially, allowing easy access and manipulation. These structures are fundamental in computer science and find applications in various algorithms and data processing tasks. Here's a comprehensive overview of some common linear data structures:

1. Arrays:
Arrays are collections of elements stored at contiguous memory locations, accessed by indexing. They provide efficient random access to elements based on their index position. Arrays have a fixed size, determined at the time of creation, and elements can be of the same data type or heterogeneous. Despite their efficient access time, arrays have limitations such as fixed size and costly insertion or deletion operations due to shifting elements.

2. Linked Lists:
Linked lists consist of nodes where each node contains data and a reference (pointer) to the next node in the sequence. Unlike arrays, linked lists do not require contiguous memory allocation, allowing dynamic memory allocation and flexible resizing. There are various types of linked lists, including singly linked lists, doubly linked lists, and circular linked lists. Linked lists excel at insertion and deletion operations, as they involve simple pointer manipulation, but they have slower access times compared to arrays due to sequential traversal.

3. Stacks:
Stacks follow the Last In, First Out (LIFO) principle, where the last-added element is the first to be removed. They support two primary operations: push (adding an element to the top of the stack) and pop (removing the top element from the stack). Stacks are commonly used in algorithms involving backtracking, recursion, and expression evaluation. They can be implemented using arrays or linked lists, with linked list implementations offering dynamic resizing capabilities.

4. Queues
Queues adhere to the First In, First Out (FIFO) principle, where the first-added element is the first to be removed. They support two primary operations: enqueue (adding an element to the rear of the queue) and dequeue (removing the front element from the queue). Queues are used in scenarios requiring ordered processing, such as task scheduling, job management, and breadth-first search algorithms. Similar to stacks, queues can be implemented using arrays or linked lists, with linked list implementations providing efficient dynamic resizing.

In conclusion, understanding linear data structures and their characteristics is crucial for designing efficient algorithms and data processing systems. Each data structure offers unique advantages and trade-offs, and selecting the appropriate structure depends on the specific requirements and constraints of the problem at hand.
